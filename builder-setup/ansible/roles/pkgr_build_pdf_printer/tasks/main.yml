- debug:
    msg: "---- Build Branch: {{ build_branch }} ----"

- debug:
    msg: "---- Build Version: {{ build_version }} ----"

- name: Install nodejs rpm
  environment: "{{ proxy_env }}"
  become: true
  ignore_errors: true 
  command: "rpm -i {{
      nodejs_source_url_base +
      nodejs_source_pub +
      nodejs_source_path_parts[ansible_userspace_architecture]
      }}"

- gem:
    name: "{{item}}"
    state: present
  with_items:
    - bundler

- name: Check if YARN repo is already configured.
  stat: path={{ yarn_rhel_repofile_path }}
  register: yarn_repofile_result

- name: Install YARN YUM repo.
  environment: "{{ proxy_env }}"
  become: true
  get_url:
    url: "{{ yarn_rhel_repo_url }}"
    dest: "{{ yarn_rhel_repofile_path }}"
    mode: 0644
  register: result
  until: '"failed" not in result'
  retries: 3
  delay: 5
  when: not yarn_repofile_result.stat.exists

- name: Import YARN GPG key.
  environment: "{{ proxy_env }}"
  become: true
  rpm_key:
    key: "{{ yarn_rhel_repo_gpg_key_url }}"
    state: present
  when: not yarn_repofile_result.stat.exists

- name: Install NodeJS package for yarn dependency
  environment: "{{ proxy_env }}"
  become: true
  package: name=nodejs state=latest

- name: Install YARN package manager
  environment: "{{ proxy_env }}"
  become: true
  package: name=yarn-1.12.3 state=present

- name: Install pkgr 1.5.1
  environment: "{{ proxy_env }}"
  command: "gem install pkgr --version=1.5.1"

- name: Trigger pkgr to build pdf_printer.rpm
  environment: "{{ proxy_env }}"
  command: bash -lc "pkgr package . --name=pdf_printer --version={{ build_version }} --env 'no_proxy="tet.wtf,ocean.af,tetrationanalytics.com,localhost,127.0.0.1"' 'http_proxy=http://proxy.esl.cisco.com:80' 'https_proxy=http://proxy.esl.cisco.com:80'"
  args:
    chdir: '{{ h4_repo_path }}'
  retries: '{{ default_pkgr_num_retries }}'
  delay: '{{ default_pkgr_retry_delay }}'

- name: Remove stale .rpm files potentially left from previous failed builds
  file:
    path='{{ dst_rpm_dir }}'
    state=absent
  ignore_errors: true

- name: Create rpms directory
  file:
    path='{{ dst_rpm_dir }}'
    state=directory

- name: Grab the rpm file name
  find:
    paths: '{{ h4_repo_path }}'
    patterns: '*.rpm'
  register: rpm_filenames

- set_fact: rpm_target="pdf_printer_{{ build_version }}.x86_64.rpm"
- set_fact:
    lastest_rpm: "{{ rpm_filenames.files | sort(attribute='mtime',reverse=true) | first }}"

- name: Move and rename .rpm file to serving directory
  become: true
  shell: cp {{ lastest_rpm.path }} {{ dst_rpm_dir }}/{{ rpm_target }}

- name: Remove old .rpm files - e.g. pdf_printer_0.14.1.160302.18.15.rpm
  become: true
  shell: find {{ dst_rpm_dir }} -type f -mtime +{{ remove_builds_before_days }} \
    -name '*.*.*.*.*.*.rpm*' -print0 | xargs -r0 rm -v
  ignore_errors: true

- name: Create Checksum file
  shell: cd {{ dst_rpm_dir }} &&
    sha256sum {{ rpm_target }} > {{ rpm_target }}.sha256sum

- debug:
    msg: "---- Finished building {{ rpm_target }} ----"
